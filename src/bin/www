#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('tip:server');
var http = require('http');
var https = require('https'), fs=require('fs'), path = require('path');
var env = process.env.NODE_ENV || "development";
var models = require("../models");

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

var port_ssl = normalizePort(process.env.SSL_PORT || '8443');
app.set('port-ssl', port_ssl);

app.set('forceSSLOptions', {
    httpsPort: app.get('port-ssl')
});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

models.sequelize.sync().then(function () {
    /*
     * Listen on provided port, on all network interfaces.
     */
    var server = app.listen(app.get('port'), function() {
        console.log('TeSLA Identity Provider listening on port ' + server.address().port);
        server.on('error', onError);
        server.on('listening', onListening);

        //setInterval(processSessionPoster, 1000, io, models);
        if(server.address().port==srv_config.poster_worker_port) {
            setTimeout(processSessionPoster, 1000, models);
        }
    });

    var httpsOptions = {
        key: fs.readFileSync(path.join(config.path, config.key)),
        cert: fs.readFileSync(path.join(config.path, config.crt))
    };

    var server_ssl = https.createServer(httpsOptions, app).listen(app.get('port-ssl'), function() {
        console.log('TeSLA Identity Provider listening on port ' + app.get('port-ssl'));
        server.on('error', onError);
        server.on('listening', onListening);
    });
});
